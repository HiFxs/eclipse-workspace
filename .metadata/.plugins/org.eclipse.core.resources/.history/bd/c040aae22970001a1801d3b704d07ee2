package codetest;

import java.lang.reflect.Array;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.Stack;

import org.junit.Test;




public class MYcode {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
	
	}
	
	@Test
    public boolean hasGroupsSizeX(int[] deck) {
        int N = deck.length;
        int[] count = new int[10000];
        for (int c: deck)
            count[c]++;

        List<Integer> values = new ArrayList();
        for (int i = 0; i < 10000; ++i)
            if (count[i] > 0)
                values.add(count[i]);

        search: for (int X = 2; X <= N; ++X)
            if (N % X == 0) {
                for (int v: values)
                    if (v % X != 0)
                        continue search;
                return true;
            }

        return false;
    }
	
	@Test
	   public int lengthOfLastWord(String s) {
		String ss=s.trim();
int length=ss.length();
		System.out.println(length);
int count=0;

if(length==1) {
	if(s.charAt(1)!=' ') {
		return  1;
	}else {
		return 0;
	}
}

for(int i=length-1;i>=0;i--) {
	if(s.charAt(i)!=' ') { count++;
	}else {
		break;
	}
	
}
return count;
    }
	
	@Test
	 public int countPrimes(int n) {
int count=0;
if(n==0||n==1) return 0;
		for(int i=2;i<=n;i++) {
			for(int j=2;j<=i;j++) {
				if(i%j==0&&j!=i) {
				
					break;
				}else if(j==i) {
					count++;
				}
			}
			
		}
		
		return count;
    }
	


	
	
}
